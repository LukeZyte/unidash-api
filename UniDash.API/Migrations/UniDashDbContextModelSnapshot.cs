// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniDash.API.Data;

#nullable disable

namespace UniDash.API.Migrations
{
    [DbContext(typeof(UniDashDbContext))]
    partial class UniDashDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UniDash.API.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9880e9b-ffc5-448c-bc97-cc00d6c95601"),
                            Color = "red",
                            Date = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(672),
                            EventTypeId = new Guid("1873d190-f08b-410e-a9a9-510a9e598cf6"),
                            IsPublic = true,
                            Name = "Trudny egzamin",
                            UserId = new Guid("79ba5203-7080-4998-85d5-9cfed69b69ba")
                        },
                        new
                        {
                            Id = new Guid("7d32a906-40a3-4faf-bdab-30a777c028fe"),
                            Color = "green",
                            Date = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(677),
                            EventTypeId = new Guid("1873d190-f08b-410e-a9a9-510a9e598cf6"),
                            IsPublic = true,
                            Name = "Łatwy egzamin",
                            UserId = new Guid("ccbe10aa-0082-4f5e-9c87-4eaaa0d448c9")
                        },
                        new
                        {
                            Id = new Guid("6622a31b-7c5d-403a-99b7-c59e643535ba"),
                            Color = "yellow",
                            Date = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(680),
                            EventTypeId = new Guid("d860e623-9350-49b9-9c04-573f6beff8df"),
                            IsPublic = true,
                            Name = "Łatwy kolos",
                            UserId = new Guid("ccbe10aa-0082-4f5e-9c87-4eaaa0d448c9")
                        });
                });

            modelBuilder.Entity("UniDash.API.Models.Domain.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1873d190-f08b-410e-a9a9-510a9e598cf6"),
                            Icon = "biretta",
                            Name = "Exam"
                        },
                        new
                        {
                            Id = new Guid("d860e623-9350-49b9-9c04-573f6beff8df"),
                            Icon = "book",
                            Name = "Test"
                        },
                        new
                        {
                            Id = new Guid("6259683a-adf4-41f2-b71f-dc311156b3b6"),
                            Icon = "board",
                            Name = "Presentation"
                        });
                });

            modelBuilder.Entity("UniDash.API.Models.Domain.Friendship", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("79ba5203-7080-4998-85d5-9cfed69b69ba"),
                            FriendId = new Guid("ccbe10aa-0082-4f5e-9c87-4eaaa0d448c9"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(647),
                            IsAccepted = true
                        },
                        new
                        {
                            UserId = new Guid("79ba5203-7080-4998-85d5-9cfed69b69ba"),
                            FriendId = new Guid("71c7ee1f-3866-47c8-a55e-19ccdb7827d2"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(652),
                            IsAccepted = true
                        },
                        new
                        {
                            UserId = new Guid("71c7ee1f-3866-47c8-a55e-19ccdb7827d2"),
                            FriendId = new Guid("ccbe10aa-0082-4f5e-9c87-4eaaa0d448c9"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(654),
                            IsAccepted = true
                        });
                });

            modelBuilder.Entity("UniDash.API.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de99be5f-0a4b-4da5-a74b-b9c10c3cef20"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(551),
                            Email = "lukjpl@wp.pl",
                            Login = "test",
                            Name = "Test",
                            Password = "Test"
                        },
                        new
                        {
                            Id = new Guid("79ba5203-7080-4998-85d5-9cfed69b69ba"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(562),
                            Email = "daniel@wp.pl",
                            Login = "daniel",
                            Name = "Daniel",
                            Password = "Daniel"
                        },
                        new
                        {
                            Id = new Guid("ccbe10aa-0082-4f5e-9c87-4eaaa0d448c9"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(564),
                            Email = "lukasz@wp.pl",
                            Login = "lukasz",
                            Name = "Lukasz",
                            Password = "Lukasz"
                        },
                        new
                        {
                            Id = new Guid("71c7ee1f-3866-47c8-a55e-19ccdb7827d2"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(565),
                            Email = "bartek@wp.pl",
                            Login = "bartek",
                            Name = "Bartek",
                            Password = "Bartek"
                        },
                        new
                        {
                            Id = new Guid("34355ad1-fe6e-4e96-bfbe-73664978feb5"),
                            CreatedAt = new DateTime(2024, 6, 1, 14, 40, 52, 934, DateTimeKind.Utc).AddTicks(567),
                            Email = "krzysztof@wp.pl",
                            Login = "krzysztof",
                            Name = "Krzysztof",
                            Password = "Krzysztof"
                        });
                });

            modelBuilder.Entity("UniDash.API.Models.Domain.Event", b =>
                {
                    b.HasOne("UniDash.API.Models.Domain.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");

                    b.HasOne("UniDash.API.Models.Domain.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniDash.API.Models.Domain.Friendship", b =>
                {
                    b.HasOne("UniDash.API.Models.Domain.User", "Friend")
                        .WithMany("Invitees")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("UniDash.API.Models.Domain.User", "User")
                        .WithMany("Inviters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniDash.API.Models.Domain.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Invitees");

                    b.Navigation("Inviters");
                });
#pragma warning restore 612, 618
        }
    }
}
